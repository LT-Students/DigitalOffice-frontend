{
  "openapi": "3.0.0",
  "info": {
    "version": "1.2.2.6",
    "title": "ProjectService",
    "description": "ProjectService, is intended to work with the projects - create them, assign people to them, update info."
  },
  "servers": [
    {
      "url": "https://project.ltdo.xyz",
      "description": "Production server"
    },
    {
      "url": "https://project.dev.ltdo.xyz",
      "description": "Development server"
    }
  ],
  "paths": {
    "/project/find": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "isascendingsort",
          "in": "query",
          "description": "Sorting of the results",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "projectstatus",
          "in": "query",
          "description": "Project type of the results",
          "schema": {
            "$ref": "#/components/schemas/ProjectStatusType"
          },
          "required": false
        },
        {
          "name": "nameincludesubstring",
          "in": "query",
          "description": "Substring which results must contain",
          "schema": {
            "type": "string"
          },
          "required": false
        },
        {
          "name": "skipCount",
          "in": "query",
          "description": "Number of entries to skip",
          "schema": {
            "type": "integer"
          },
          "required": true
        },
        {
          "name": "takeCount",
          "in": "query",
          "description": "Number of projects to take.",
          "schema": {
            "type": "integer"
          },
          "required": true
        },
        {
          "name": "includedepartment",
          "in": "query",
          "description": "Inclede project department info.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "findProjects",
        "responses": {
          "200": {
            "description": "Successfully returned a projects informations.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindResultResponseProjectInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindResultResponseProjectInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n"
          }
        }
      }
    },
    "/project/get": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "$ref": "#/components/parameters/projectId"
        },
        {
          "name": "includeusers",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "shownotactiveusers",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includefiles",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeimages",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "getProject",
        "responses": {
          "200": {
            "description": "Successfully returned a project information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponseProjectResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/project/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Project"
        ],
        "operationId": "createProject",
        "description": "Creating new project.\n*  __The user must have access right__ -- Add/Edit/Remove projects.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully create the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/project/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "patch": {
        "tags": [
          "Project"
        ],
        "operationId": "editProject",
        "description": "Editing specific project by Id.\n*  __The user must have been the department director. \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProjectRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Project respose.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n* Error in the field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "File"
        ],
        "operationId": "createFile",
        "description": "Add files to Project.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully add files to the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/file/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "delete": {
        "tags": [
          "File"
        ],
        "operationId": "removeFile",
        "description": "Remove files from Project.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveFilesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully removed images from project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/image/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Image"
        ],
        "operationId": "createImage",
        "description": "Add images to Project.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateImageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully add images to the project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/image/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "delete": {
        "tags": [
          "Image"
        ],
        "operationId": "removeImage",
        "description": "Remove images from Project.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveImageRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully removed images from project.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "createProjectUsers",
        "description": "Adding specific users to project.\n*  __The user must have access right__ -- Add/Edit/Remove projects.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectUsersRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Users of specific project added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n* Error in the field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/editrole": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "put": {
        "tags": [
          "User"
        ],
        "operationId": "editProjectUsers",
        "description": "Editing specific users in specific project.\n*  __The user must have access right__ -- Add/Edit/Remove projects.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditProjectUsersRoleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Users of specific project edited successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n* Error in the field.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/user/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "$ref": "#/components/parameters/projectId"
        }
      ],
      "delete": {
        "tags": [
          "User"
        ],
        "operationId": "removeProjectUsers",
        "description": "Remove specific users from specific project.\n* __The user must have access right__ -- Add/Edit/Remove project. \n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Removed users by id successful.\n  * OK\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DepartmentInfo": {
        "type": "object",
        "required": [
          "Id",
          "Name",
          "ShortName"
        ],
        "properties": {
          "Id": {
            "description": "Unique department identifier.",
            "type": "string",
            "format": "uuid",
            "example": "20d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "Name": {
            "description": "The department name.",
            "type": "string",
            "example": "Department"
          },
          "ShortName": {
            "description": "The department short name.",
            "type": "string"
          }
        }
      },
      "PositionInfo": {
        "type": "object",
        "required": [
          "Id",
          "Name"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "UserStatus": {
        "type": "string",
        "description": "Mode for user status.",
        "enum": [
          "Vacation",
          "Sick",
          "WorkFromOffice",
          "WorkFromHome"
        ],
        "example": "Sick",
        "default": "WorkFromOffice"
      },
      "FileInfo": {
        "type": "object",
        "required": [
          "Content",
          "Extension",
          "Access"
        ],
        "properties": {
          "Name": {
            "description": "Name of the file.",
            "type": "string"
          },
          "Content": {
            "description": "File content.",
            "type": "string"
          },
          "Extension": {
            "description": "Extension of the file.",
            "type": "string",
            "example": ".txt"
          },
          "Access": {
            "$ref": "#/components/schemas/AccessType"
          }
        }
      },
      "FileAccess": {
        "type": "object",
        "required": [
          "FileId",
          "Access"
        ],
        "properties": {
          "FileId": {
            "type": "string",
            "format": "uuid"
          },
          "Access ": {
            "$ref": "#/components/schemas/AccessType"
          }
        }
      },
      "ImageContent": {
        "type": "object",
        "required": [
          "Content",
          "Extension"
        ],
        "properties": {
          "Name": {
            "description": "Name of the image.",
            "type": "string"
          },
          "Content": {
            "description": "Image file content in base64 encoded string.",
            "type": "string"
          },
          "Extension": {
            "description": "Extension of the image.",
            "type": "string",
            "example": ".jpg"
          }
        }
      },
      "ImageInfo": {
        "type": "object",
        "required": [
          "Id",
          "Content",
          "Extension"
        ],
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ParentId": {
            "type": "string",
            "format": "uuid"
          },
          "Content": {
            "type": "string",
            "description": "Image file content in base64 encoded string."
          },
          "Extension": {
            "type": "string"
          },
          "Name": {
            "type": "string"
          }
        }
      },
      "ImageType": {
        "type": "string",
        "description": "Type of the entity.\n",
        "enum": [
          "Project",
          "Task"
        ],
        "nullable": false,
        "example": "Project"
      },
      "AccessType": {
        "type": "string",
        "description": "Type of the access to the file.\n",
        "enum": [
          "Manager",
          "Team",
          "Public"
        ],
        "nullable": false,
        "example": "Public"
      },
      "UserInfo": {
        "type": "object",
        "required": [
          "Id",
          "FirstName",
          "LastName",
          "Status",
          "CreatedAtUtc",
          "IsActive",
          "ProjectCount",
          "Role"
        ],
        "properties": {
          "Id": {
            "description": "Unique project identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "FirstName": {
            "description": "The user first name",
            "type": "string",
            "example": "Iya"
          },
          "MiddleName": {
            "description": "The user middle name.",
            "type": "string",
            "example": "Sergeevith"
          },
          "LastName": {
            "description": "The user last name.",
            "type": "string",
            "example": "Svetlov"
          },
          "Status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "Rate": {
            "type": "number"
          },
          "CreatedAtUtc": {
            "description": "Data and time added user to project.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "ModifiedAtUtc": {
            "description": "Data and time removed user from project.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2020-12-10 04:13"
          },
          "IsActive": {
            "description": "User state.",
            "type": "boolean",
            "example": true
          },
          "ProjectCount": {
            "description": "Count of project, which user included.",
            "type": "integer"
          },
          "Role": {
            "$ref": "#/components/schemas/ProjectUserRoleType"
          },
          "Position": {
            "$ref": "#/components/schemas/PositionInfo"
          },
          "Department": {
            "$ref": "#/components/schemas/DepartmentInfo"
          },
          "AvatarImage": {
            "$ref": "#/components/schemas/ImageInfo"
          }
        }
      },
      "ProjectInfo": {
        "type": "object",
        "required": [
          "Id",
          "CreatedBy",
          "Status",
          "Name",
          "ShortName",
          "UsersCount",
          "StartDateUtc",
          "CreatedAtUtc"
        ],
        "properties": {
          "Id": {
            "description": "Unique project identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "CreatedBy": {
            "description": "Unique project creator identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "Status": {
            "$ref": "#/components/schemas/ProjectStatusType"
          },
          "Name": {
            "description": "Project name.",
            "type": "string",
            "example": "Digital Office"
          },
          "ShortName": {
            "description": "Project short name.",
            "type": "string",
            "example": "DO"
          },
          "Description": {
            "description": "Project description.",
            "type": "string"
          },
          "ShortDescription": {
            "description": "Project short description.",
            "type": "string"
          },
          "Customer": {
            "description": "Project сustomer.",
            "type": "string"
          },
          "UsersCount": {
            "description": "Count of active users in project.",
            "type": "integer"
          },
          "StartDateUtc": {
            "description": "Date and time begin project in UTC.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "EndDateUtc": {
            "description": "Date and time finished project in UTC.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "CreatedAtUtc": {
            "description": "Data and time created project.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "Department": {
            "$ref": "#/components/schemas/DepartmentInfo"
          }
        }
      },
      "ProjectStatusType": {
        "type": "string",
        "description": "Project status.\nMay be empty, default value: 'Active'.",
        "enum": [
          "Active",
          "Closed",
          "Suspend"
        ],
        "nullable": false,
        "example": "Suspend"
      },
      "ProjectUserRoleType": {
        "type": "string",
        "description": "User role\n\n,Enum numbers description.",
        "enum": [
          "Manager",
          "Employee"
        ],
        "example": "Manager"
      },
      "CreateProjectRequest": {
        "type": "object",
        "required": [
          "Name",
          "Status",
          "ProjectImages",
          "Files"
        ],
        "properties": {
          "Name": {
            "description": "Project name.",
            "type": "string",
            "example": "Digital Office"
          },
          "ShortName": {
            "description": "Project short name.",
            "type": "string",
            "example": "DO"
          },
          "Description": {
            "description": "Project description.",
            "type": "string",
            "example": "Work spase"
          },
          "ShortDescription": {
            "description": "Project short description.",
            "type": "string",
            "example": "Work spase"
          },
          "Customer": {
            "description": "Project customer name.",
            "type": "string",
            "example": "Misha"
          },
          "StartDateUtc": {
            "description": "Date and time begin project in UTC.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "EndDateUtc": {
            "description": "Date and time finish project in UTC.",
            "pattern": "YYYY-MM-DDTHH:mm",
            "example": "2021-12-10 03:13"
          },
          "Status": {
            "$ref": "#/components/schemas/ProjectStatusType"
          },
          "DepartmentId": {
            "description": "Unique department identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "ProjectImages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageContent"
            }
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            }
          }
        }
      },
      "CreateProjectUsersRequest": {
        "type": "object",
        "required": [
          "ProjectId",
          "Users"
        ],
        "properties": {
          "ProjectId": {
            "description": "Unique project identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          }
        }
      },
      "EditProjectUsersRoleRequest": {
        "type": "object",
        "required": [
          "Role",
          "UsersIds"
        ],
        "properties": {
          "Role": {
            "$ref": "#/components/schemas/ProjectUserRoleType"
          },
          "UsersIds": {
            "type": "array",
            "items": {
              "description": "Unique user identifier.",
              "type": "string",
              "format": "uuid",
              "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
            }
          }
        }
      },
      "EditProjectRequest": {
        "type": "array",
        "minItems": 1,
        "required": [
          "op",
          "path",
          "value"
        ],
        "items": {
          "$ref": "#/components/schemas/ProjectPatchDocument"
        },
        "example": [
          {
            "op": "replace",
            "path": "/Name",
            "value": {
              "type": "string",
              "description": "new name"
            }
          },
          {
            "op": "replace",
            "path": "/ShortName",
            "value": {
              "type": "string",
              "description": "new short name"
            }
          },
          {
            "op": "replace",
            "path": "/Description",
            "value": {
              "type": "string",
              "description": "new description"
            }
          },
          {
            "op": "replace",
            "path": "/ShortDescription",
            "value": {
              "type": "string",
              "description": "new short description"
            }
          },
          {
            "op": "replace",
            "path": "/Customer",
            "value": {
              "type": "string",
              "description": "new customer"
            }
          },
          {
            "op": "replace",
            "path": "/StartDateUtc",
            "value": {
              "pattern": "YYYY-MM-DDTHH:mm",
              "description": "date and time begin project in Utc."
            }
          },
          {
            "op": "replace",
            "path": "/EndDateUtc",
            "value": {
              "pattern": "YYYY-MM-DDTHH:mm",
              "description": "date and time finish project in Utc."
            }
          },
          {
            "op": "replace",
            "path": "/Status",
            "value": {
              "type": "string",
              "description": "project status",
              "enum": [
                "Active",
                "Closed",
                "Suspend"
              ]
            }
          }
        ]
      },
      "ProjectPatchDocument": {
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer.",
            "enum": [
              "/Name",
              "/ShortName",
              "/Description",
              "/ShortDescription",
              "/Customer",
              "/StartDateUtc",
              "/EndDateUtc",
              "/Status"
            ]
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "required": [
          "Role",
          "UserId"
        ],
        "properties": {
          "UserId": {
            "description": "Unique user identifier.",
            "type": "string",
            "format": "uuid",
            "example": "80d13a19-872e-45bc-b1ed-a01d6fac3c0f"
          },
          "Role": {
            "$ref": "#/components/schemas/ProjectUserRoleType"
          }
        }
      },
      "FindResultResponseProjectInfo": {
        "type": "object",
        "required": [
          "TotalCount",
          "Errors",
          "Status"
        ],
        "properties": {
          "TotalCount": {
            "description": "Total number of finded by filter projects.",
            "type": "integer",
            "example": 10
          },
          "Body": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInfo"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          }
        }
      },
      "CreateFilesRequest": {
        "type": "object",
        "required": [
          "ProjectId",
          "Files"
        ],
        "properties": {
          "ProjectId": {
            "type": "string",
            "format": "uuid"
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileInfo"
            }
          }
        }
      },
      "RemoveFilesRequest": {
        "type": "object",
        "required": [
          "ProjectId",
          "FilesIds"
        ],
        "properties": {
          "ProjectId": {
            "type": "string",
            "format": "uuid"
          },
          "FilesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "CreateImageRequest": {
        "type": "object",
        "required": [
          "EntityId",
          "Images",
          "ImageType"
        ],
        "properties": {
          "EntityId": {
            "type": "string",
            "format": "uuid"
          },
          "Images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageContent"
            }
          }
        }
      },
      "RemoveImageRequest": {
        "type": "object",
        "required": [
          "EntityId",
          "ImageType",
          "ImagesIds"
        ],
        "properties": {
          "EntityId": {
            "type": "string",
            "format": "uuid"
          },
          "ImageType": {
            "$ref": "#/components/schemas/ImageType"
          },
          "ImagesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        }
      },
      "OperationResultResponse": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "type": "object"
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OperationResultResponseProjectResponse": {
        "description": "Response object for action operations.",
        "type": "object",
        "required": [
          "Errors",
          "Status",
          "TotalCount"
        ],
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/ProjectResponse"
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ProjectResponse": {
        "type": "object",
        "required": [
          "Project"
        ],
        "properties": {
          "Project": {
            "$ref": "#/components/schemas/ProjectInfo"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            }
          },
          "Files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FileAccess"
            }
          },
          "Images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageInfo"
            }
          }
        }
      },
      "OperationResultStatusType": {
        "type": "string",
        "description": "Operation complition result status.",
        "enum": [
          "FullSuccess",
          "PartialSuccess",
          "Failed"
        ],
        "example": "FullSuccess",
        "default": "FullSuccess"
      }
    },
    "parameters": {
      "request": {
        "name": "request",
        "in": "query",
        "description": "Entity id.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "taskId": {
        "name": "taskId",
        "in": "query",
        "description": "Task global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "taskPropertyId": {
        "name": "taskPropertyId",
        "in": "query",
        "description": "TaskProperty global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "projectId": {
        "name": "projectId",
        "in": "query",
        "description": "Project global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "userId": {
        "name": "userId",
        "in": "query",
        "description": "User global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "fileId": {
        "name": "fileId",
        "in": "query",
        "description": "File global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "roleId": {
        "name": "roleId",
        "in": "query",
        "description": "Role global unique identifier.",
        "schema": {
          "type": "string",
          "format": "uuid"
        },
        "required": true
      },
      "securityToken": {
        "name": "token",
        "in": "header",
        "description": "The JWT token.",
        "schema": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
        },
        "required": true
      }
    }
  }
}
