{
  "openapi": "3.0.0",
  "info": {
    "version": "1.3.5",
    "title": "CompanyService",
    "description": "CompanyService is an API that intended to work with positions and departments."
  },
  "servers": [
    {
      "url": "https://company.ltdo.xyz"
    }
  ],
  "paths": {
    "/position/get": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Position"
        ],
        "operationId": "getPositionById",
        "description": "Returns position by id.",
        "parameters": [
          {
            "name": "positionId",
            "in": "query",
            "description": "Position global unique identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned a position.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PositionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/position/find": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Position"
        ],
        "operationId": "getPositionsList",
        "description": "Returns all added positions.",
        "responses": {
          "200": {
            "description": "Successfully returned added positions.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PositionResponse"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/position/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Position"
        ],
        "operationId": "addPosition",
        "description": "Adds a new position.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePositionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "New position was successfully added.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Position global unique identifier.",
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n* Incorrect position data.\n* This position id already exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* Not enough rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/position/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Position"
        ],
        "operationId": "editPosition",
        "description": "Edits a specified position.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditPositionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok.\n* Position was successfully changed.\n"
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* Not enough rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\n* Position with this id not found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/position/disable": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "delete": {
        "tags": [
          "Position"
        ],
        "operationId": "disablePositionById",
        "description": "Deletes the specified position.",
        "parameters": [
          {
            "name": "positionId",
            "in": "query",
            "description": "Position global unique identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Ok.\n* Position was successfully removed.\n"
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* Not enough rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\n* Position with this id not found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/department/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Department"
        ],
        "operationId": "addDepartment",
        "description": "Adds a new department to company.\n* __The user must have access to the right__ -- Add/Edit/Remove departments.\n",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewDepartmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Guid of the added department.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.\n* Incorrect department data.\n* This department id already exist.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/department/get": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Department"
        ],
        "operationId": "getDepartment",
        "description": "Returns department by id.",
        "parameters": [
          {
            "name": "departmentId",
            "in": "query",
            "description": "Department global unique identifier.",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned department.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentInfo"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found.\n* Department with this id not found.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/department/find": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Department"
        ],
        "operationId": "getDepartments",
        "description": "Returns finded departments.",
        "responses": {
          "200": {
            "description": "Successfully returned departments.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepartmentsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/company/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Company"
        ],
        "operationId": "createCompany",
        "description": "Adds a new company.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Guid of the created company.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/company/get": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Company"
        ],
        "operationId": "getCompany",
        "responses": {
          "200": {
            "description": "Successfully returned a company.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyInfo"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/office/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Office"
        ],
        "operationId": "createOffice",
        "description": "Adds a new office to company.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOfficeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Guid of the created office.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/office/find": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Company"
        ],
        "operationId": "findOffices",
        "responses": {
          "200": {
            "description": "Successfully returned all offices.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OfficesResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "CreatePositionRequest": {
        "type": "object",
        "description": "Specific position data.",
        "required": [
          "Name",
          "Description"
        ],
        "properties": {
          "Name": {
            "description": "Position name.",
            "type": "string",
            "example": "IT projects consultant"
          },
          "Description": {
            "description": "Position description.",
            "type": "string",
            "example": "Responsibilities include the following. Communication with clients, analysis of client needs, setting a developer's task, control of execution, testing, delivery of the result to the client. Maintaining project documentation, both with the client and internal. Keeping statistics and analysis, searching for customers for integration in the supplier base. Document management (contracts, accounts, acts).",
            "nullable": true
          }
        }
      },
      "EditPositionRequest": {
        "type": "object",
        "description": "Specific position data.",
        "required": [
          "Id",
          "Name",
          "Description",
          "IsActive"
        ],
        "properties": {
          "Id": {
            "description": "Specific position id.",
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "description": "Position name.",
            "type": "string",
            "example": "IT projects consultant"
          },
          "Description": {
            "description": "Position description.",
            "type": "string",
            "example": "Responsibilities include the following. Communication with clients, analysis of client needs, setting a developer's task, control of execution, testing, delivery of the result to the client. Maintaining project documentation, both with the client and internal. Keeping statistics and analysis, searching for customers for integration in the supplier base. Document management (contracts, accounts, acts).",
            "nullable": true
          },
          "IsActive": {
            "description": "Marks whether position is active or not.",
            "type": "boolean"
          }
        }
      },
      "NewDepartmentRequest": {
        "type": "object",
        "required": [
          "Info",
          "UsersIds"
        ],
        "properties": {
          "Info": {
            "$ref": "#/components/schemas/BaseDepartmentInfo"
          },
          "Users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentUserInfo"
            }
          }
        }
      },
      "PositionResponse": {
        "type": "object",
        "properties": {
          "Info": {
            "$ref": "#/components/schemas/PositionInfo"
          },
          "UserIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        }
      },
      "PositionInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "description": "Specific position id.",
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "description": "Position name.",
            "type": "string",
            "example": "IT projects consultant"
          },
          "Description": {
            "description": "Position description.",
            "type": "string",
            "example": "Responsibilities include the following. Communication with clients, analysis of client needs, setting a developer's task, control of execution, testing, delivery of the result to the client. Maintaining project documentation, both with the client and internal. Keeping statistics and analysis, searching for customers for integration in the supplier base. Document management (contracts, accounts, acts).",
            "nullable": true
          },
          "IsActive": {
            "description": "Marks whether position is active or not.",
            "type": "boolean"
          }
        }
      },
      "BaseDepartmentInfo": {
        "type": "object",
        "description": "Specific department data.",
        "required": [
          "Name",
          "Description"
        ],
        "properties": {
          "Id": {
            "description": "Department id.",
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "description": "Department name.",
            "type": "string"
          },
          "Description": {
            "description": "Department description.",
            "type": "string",
            "nullable": true
          },
          "DirectorUserId": {
            "description": "Specific director user id this department.",
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        }
      },
      "DepartmentUserInfo": {
        "type": "object",
        "description": "User data of specific department.",
        "properties": {
          "UserId": {
            "type": "string",
            "format": "uuid",
            "description": "Specific users id."
          },
          "PositionId": {
            "type": "string",
            "format": "uuid",
            "description": "Specific position id."
          }
        }
      },
      "DepartmentsResponse": {
        "type": "object",
        "properties": {
          "Count": {
            "type": "integer",
            "description": "Total number of all departments."
          },
          "Departments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepartmentInfo"
            }
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "DepartmentInfo": {
        "type": "object",
        "description": "Specific department data.",
        "properties": {
          "Id": {
            "description": "Department id.",
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "description": "Department name.",
            "type": "string"
          },
          "Description": {
            "description": "Department description.",
            "type": "string",
            "nullable": true
          },
          "Director": {
            "$ref": "#/components/schemas/UserInfo",
            "nullable": true
          },
          "Users": {
            "type": "array",
            "description": "Workers of this department.",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            }
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "description": "User data.",
        "properties": {
          "Id": {
            "type": "string",
            "format": "guid"
          },
          "FirstName": {
            "type": "string",
            "example": "Spartak"
          },
          "LastName": {
            "type": "string",
            "example": "Ryabtsev"
          },
          "MiddleName": {
            "type": "string",
            "example": "Alexandrovich",
            "nullable": true
          }
        }
      },
      "ErrorResponse": {
        "description": "Error information",
        "type": "object",
        "properties": {
          "UtcTime": {
            "type": "string"
          },
          "Header": {
            "type": "string"
          },
          "Message": {
            "description": "A human readable message providing more details about the error.",
            "type": "string"
          }
        }
      },
      "CreateCompanyRequest": {
        "type": "object",
        "required": [
          "CompanyName",
          "SMTP",
          "AdminInfo"
        ],
        "properties": {
          "PortalName": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "SMTP": {
            "$ref": "#/components/schemas/SMTP"
          },
          "AdminInfo": {
            "$ref": "#/components/schemas/AdminInfo"
          }
        }
      },
      "CreateOfficeRequest": {
        "type": "object",
        "required": [
          "City",
          "Address"
        ],
        "properties": {
          "Name": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          }
        }
      },
      "CompanyInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "PortalName": {
            "type": "string"
          },
          "CompanyName": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "Tagline": {
            "type": "string"
          },
          "SiteUrl": {
            "type": "string"
          },
          "Logo": {
            "$ref": "#/components/schemas/ImageInfo"
          },
          "Departments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortDepartmentInfo"
            }
          },
          "Positions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PositionInfo"
            }
          },
          "Offices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfficeInfo"
            }
          }
        }
      },
      "ShortDepartmentInfo": {
        "type": "object",
        "description": "Specific department data.",
        "properties": {
          "Id": {
            "description": "Department id.",
            "type": "string",
            "format": "guid"
          },
          "Name": {
            "description": "Department name.",
            "type": "string"
          },
          "Description": {
            "description": "Department description.",
            "type": "string",
            "nullable": true
          },
          "IsActive": {
            "type": "boolean"
          }
        }
      },
      "OfficeInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "City": {
            "type": "string"
          },
          "Address": {
            "type": "string"
          }
        }
      },
      "OfficesResponse": {
        "type": "object",
        "properties": {
          "Offices": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfficeInfo"
            }
          }
        }
      },
      "ImageInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ParentId": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "Content": {
            "type": "string",
            "format": "byte"
          },
          "Extension": {
            "type": "string"
          }
        }
      },
      "SMTP": {
        "type": "object",
        "required": [
          "Host",
          "Port",
          "EnableSsl",
          "Email",
          "Password"
        ],
        "properties": {
          "Host": {
            "type": "string"
          },
          "Port": {
            "type": "integer"
          },
          "EnableSsl": {
            "type": "boolean"
          },
          "Email": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      },
      "AdminInfo": {
        "type": "object",
        "required": [
          "FirstName",
          "LastName",
          "Email",
          "Login",
          "Password"
        ],
        "properties": {
          "FirstName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "integer"
          },
          "LastName": {
            "type": "boolean"
          },
          "Email": {
            "type": "string"
          },
          "Login": {
            "type": "string"
          },
          "Password": {
            "type": "string"
          }
        }
      }
    },
    "parameters": {
      "securityToken": {
        "name": "token",
        "in": "header",
        "description": "The JWT token.",
        "schema": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ"
        },
        "required": true
      }
    }
  }
}
