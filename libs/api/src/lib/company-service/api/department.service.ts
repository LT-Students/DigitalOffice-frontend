/**
 * CompanyService
 * CompanyService is an API intended to work with the positions, companies, dep  **Changes since 0.0.0** -
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { DepartmentRequest } from '../model/departmentRequest';
import { DepartmentResponse } from '../model/departmentResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DepartmentService {

    protected basePath = 'https://localhost:9815/CompanyService';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * Adds a new Department.
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addDepartmentPost(body: DepartmentRequest, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addDepartmentPost(body: DepartmentRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addDepartmentPost(body: DepartmentRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addDepartmentPost(body: DepartmentRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addDepartmentPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/addDepartment`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Deletes the specified Department.
     * @param departmentId Department global unique identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public disableDepartmentDelete(departmentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public disableDepartmentDelete(departmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public disableDepartmentDelete(departmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public disableDepartmentDelete(departmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (departmentId === null || departmentId === undefined) {
            throw new Error('Required parameter departmentId was null or undefined when calling disableDepartmentDelete.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (departmentId !== undefined && departmentId !== null) {
            queryParameters = queryParameters.set('DepartmentId', <any>departmentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/disableDepartment`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Edits a specified department.
     * @param body 
     * @param departmentId Department global unique identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public editDepartmentPut(body: DepartmentRequest, departmentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public editDepartmentPut(body: DepartmentRequest, departmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public editDepartmentPut(body: DepartmentRequest, departmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public editDepartmentPut(body: DepartmentRequest, departmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling editDepartmentPut.');
        }

        if (departmentId === null || departmentId === undefined) {
            throw new Error('Required parameter departmentId was null or undefined when calling editDepartmentPut.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (departmentId !== undefined && departmentId !== null) {
            queryParameters = queryParameters.set('departmentId', <any>departmentId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/editDepartment`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Returns all added Department of specifed companies.
     * @param companyId Company global unique identifier.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCompanyDepartmentsGet(companyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<DepartmentResponse>>;
    public getCompanyDepartmentsGet(companyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<DepartmentResponse>>>;
    public getCompanyDepartmentsGet(companyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<DepartmentResponse>>>;
    public getCompanyDepartmentsGet(companyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (companyId === null || companyId === undefined) {
            throw new Error('Required parameter companyId was null or undefined when calling getCompanyDepartmentsGet.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (companyId !== undefined && companyId !== null) {
            queryParameters = queryParameters.set('companyId', <any>companyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<DepartmentResponse>>('get',`${this.basePath}/getCompanyDepartments`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
