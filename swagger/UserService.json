{
  "openapi": "3.0.0",
  "info": {
    "version": "1.4.0",
    "title": "UserService",
    "description": "UserService is an API that intended to work with users."
  },
  "servers": [
    {
      "url": "https://user.ltdo.xyz"
    }
  ],
  "paths": {
    "/users/get": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "userId",
          "in": "query",
          "description": "User global unique identifier.",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        },
        {
          "name": "name",
          "in": "query",
          "description": "User first or last name.",
          "schema": {
            "type": "string"
          },
          "required": false
        },
        {
          "name": "email",
          "in": "query",
          "description": "Any of user emails. Can not be used with `includecommunications`.",
          "schema": {
            "type": "string"
          },
          "required": false
        },
        {
          "name": "includecommunications",
          "in": "query",
          "description": "Include user communications info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includecertificates",
          "in": "query",
          "description": "Include user certificates info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeachievements",
          "in": "query",
          "description": "Include user achievements info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includedepartment",
          "in": "query",
          "description": "Include user department info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeposition",
          "in": "query",
          "description": "Include user position info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeoffice",
          "in": "query",
          "description": "Include user office info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includerole",
          "in": "query",
          "description": "Include user role info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeskills",
          "in": "query",
          "description": "Include user skills info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeprojects",
          "in": "query",
          "description": "Include user projects info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeimages",
          "in": "query",
          "description": "Include images content in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeeducations",
          "in": "query",
          "description": "Include educations info in answer.",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "getUser",
        "description": "Returns user information.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponseUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n* You must specify 'userId' or|and 'name' or|and 'email'.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Enter tokken.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\n* User was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/find": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "skipCount",
          "in": "query",
          "description": "Number of entries to skip.",
          "schema": {
            "type": "integer"
          },
          "required": true
        },
        {
          "name": "takeCount",
          "in": "query",
          "description": "Number of users to take.",
          "schema": {
            "type": "integer"
          },
          "required": true
        },
        {
          "name": "departmentid",
          "in": "query",
          "description": "Specific department of users.",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": false
        },
        {
          "name": "includedeactivated",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includedepartment",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeposition",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeoffice",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includerole",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        },
        {
          "name": "includeavatar",
          "in": "query",
          "schema": {
            "type": "boolean"
          },
          "required": false
        }
      ],
      "get": {
        "tags": [
          "User"
        ],
        "operationId": "findUsers",
        "description": "Returns all users information with pagination.",
        "responses": {
          "200": {
            "description": "Ok.\n* Successfully returned list of users information.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindResultResponseUserInfo"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* User has not rights.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "User"
        ],
        "operationId": "createUser",
        "description": "The method attempts to add the user. The user must have right - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Ok.\n* Created user Id (uuid) will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n* Something went wrong.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* User is not admin and don't has rights.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\n* User with this communication value already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "userId",
          "in": "query",
          "description": "Specific user id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "User"
        ],
        "operationId": "editUser",
        "description": "Update user properties. The user must have right - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.\n* Update user operation success (boolean) status will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequest"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/credentials/create": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "operationId": "createCredentials",
        "description": "This endpoint must be used only for user first time login operation.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialsRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ok. Success create credentials.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponseCredentialsResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Request password not equal user password.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. User with this id not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. User with this login already exits.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }
        }
      }
    },
    "/password/generate": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "get": {
        "tags": [
          "Credentials"
        ],
        "operationId": "generatePassword",
        "description": "Returns randomly generated password.",
        "responses": {
          "200": {
            "description": "Ok.\n* Successfully returned password string.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "8-12 symbols password string.",
                  "type": "string",
                  "example": "!31TKgk_"
                }
              }
            }
          }
        }
      }
    },
    "/password/change": {
      "post": {
        "tags": [
          "Credentials"
        ],
        "operationId": "changePassword",
        "description": "Change user password.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.\n* Change user password operation success (boolean) status will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n* Login or new password empty. ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Invalid user data.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.\n* User credentionals was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/password/forgot": {
      "parameters": [
        {
          "name": "userEmail",
          "in": "query",
          "schema": {
            "type": "string",
            "example": "la@gmail.com"
          },
          "required": true
        }
      ],
      "get": {
        "tags": [
          "Credentials"
        ],
        "operationId": "forgotPassword",
        "description": "Initiates sending a email with instructions on how to change the user's password.",
        "responses": {
          "200": {
            "description": "Ok.\n* Send email operation success (boolean) status will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n* Incorrect email.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found. User with this email was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/education/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Education"
        ],
        "operationId": "createEducation",
        "description": "The method attempts to add the education. The user must have the rights to add education to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEducationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok.\n* Created education Id (uuid) will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* User has not rights.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\n* Token was not entered.\n* Invalid token.\n* User has not rights.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/education/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "educationId",
          "in": "query",
          "description": "Specific education id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "Education"
        ],
        "operationId": "editEducation",
        "description": "Update education properties. The user must have the rights to edit education to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditEducationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.\n* Update education operation success (boolean) status will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* User has not rights.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/education/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "educationId",
          "in": "query",
          "description": "Education global unique identifier.",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "delete": {
        "tags": [
          "Education"
        ],
        "operationId": "removeEducation",
        "description": "Remove the specified education by id. The user must have the rights to remove education to other users - Add/Edit/Remove users.",
        "responses": {
          "200": {
            "description": "Ok.\n* Remove education operation success (boolean) status will be in response Body property.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.\n* This education not linked with this user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.\n* Token was not entered.\n* Invalid token.\n* User has not rights.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certificate/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Certificate"
        ],
        "operationId": "createCertificate",
        "description": "The method attempts to add the certificate. The user must have the rights to add education to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCertificateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certificate/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "certificateId",
          "in": "query",
          "description": "Specific certificate id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "Certificate"
        ],
        "operationId": "editCertificate",
        "description": "Update certificate properties. The user must have the rights to edit certificate to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCertificateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certificate/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "certificateId",
          "in": "query",
          "description": "Specific certificate id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "delete": {
        "tags": [
          "Certificate"
        ],
        "operationId": "removeCertificate",
        "description": "Remove the specified certificate by id. The user must have the rights to remove certificate to other users - Add/Edit/Remove users.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/communication/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "Communication"
        ],
        "operationId": "createCommunication",
        "description": "The method attempts to add the communication. The user must have the rights to add education to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommunicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\n* Position with this name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }

        }
      }
    },
    "/communication/edit": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "communicationId",
          "in": "query",
          "description": "Specific communication id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "patch": {
        "tags": [
          "Communication"
        ],
        "operationId": "editCommunication",
        "description": "Update communication properties. The user must have the rights to edit communication to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EditCommunicationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/communication/remove": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        },
        {
          "name": "communicationId",
          "in": "query",
          "description": "Specific communication id",
          "schema": {
            "type": "string",
            "format": "uuid"
          },
          "required": true
        }
      ],
      "delete": {
        "tags": [
          "Communication"
        ],
        "operationId": "removeCommunication",
        "description": "Remove the specified communication by id. The user must have the rights to remove communication to other users - Add/Edit/Remove users.",
        "responses": {
          "200": {
            "description": "Ok.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/image/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "avatar"
        ],
        "operationId": "createAvatar",
        "description": "The method attempts to add avatar to user. The user must have the rights to add images to other users - Add/Edit/Remove users.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommunicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Ok. User avatar was added.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict.\n* Position with this name already exists.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          }

        }
      }
    },
    "/skill/create": {
      "parameters": [
        {
          "$ref": "#/components/parameters/securityToken"
        }
      ],
      "post": {
        "tags": [
          "skill"
        ],
        "operationId": "createSkill",
        "description": "The method attempts to add skill. The sender must have the rights 'Add/Edit/Remove users' or must be an admin to create skill.",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Ok. Skill was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OperationResultResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. Sender has no rights and not an admin",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. Skill with that name already exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OperationResultResponseUserResponse": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/UserInfo"
              },
              "skills": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "nullable": true
              },
              "communications": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CommunicationInfo"
                },
                "nullable": true
              },
              "certificates": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CertificateInfo"
                },
                "nullable": true
              },
              "achievements": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserAchievementInfo"
                },
                "nullable": true
              },
              "projects": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectInfo"
                },
                "nullable": true
              },
              "educations": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/EducationInfo"
                },
                "nullable": true
              }
            }
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "FindResultResponseUserInfo": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInfo"
            }
          },
          "TotalCount": {
            "type": "number"
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }

      },
      "CreateUserRequest": {
        "type": "object",
        "required": [
          "FirstName",
          "LastName",
          "Gender",
          "Status",
          "Rate",
          "PositionId",
          "OfficeId",
          "Communications"
        ],
        "properties": {
          "FirstName": {
            "description": "First name of a user.",
            "type": "string",
            "example": "Ivan",
            "nullable": false
          },
          "LastName": {
            "description": "Last name of a user.",
            "type": "string",
            "example": "Ivanov",
            "nullable": false
          },
          "MiddleName": {
            "description": "Middle name of a user.",
            "type": "string",
            "example": "Ivanovich",
            "nullable": true
          },
          "Gender": {
            "$ref": "#/components/schemas/UserGender"
          },
          "DayOfBirth": {
            "description": "Date of user birth.",
            "type": "string",
            "format": "date",
            "example": "2021-01-21T00:00:00.000Z",
            "nullable": true
          },
          "City": {
            "description": "User city.",
            "type": "string",
            "example": "Moscow",
            "nullable": true
          },
          "AvatarImage": {
            "$ref": "#/components/schemas/AddImageRequest"
          },
          "Status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "IsAdmin": {
            "description": "Mark whether the user is an administrator.",
            "type": "boolean",
            "default": false,
            "nullable": true
          },
          "StartWorkingAt": {
            "description": "Time when the user started working for the company.",
            "type": "string",
            "format": "date",
            "example": "2021-01-21T00:00:00.000Z",
            "nullable": true
          },
          "Rate": {
            "description": "User rate",
            "type": "number",
            "example": 0.25,
            "format": "float",
            "nullable": false
          },
          "PositionId": {
            "description": "User position ID.",
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4",
            "nullable": false
          },
          "DepartmentId": {
            "description": "User department ID.",
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4",
            "nullable": true
          },
          "OfficeId": {
            "description": "User office ID.",
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4",
            "nullable": false
          },
          "RoleId": {
            "description": "User role ID.",
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4",
            "nullable": true
          },
          "Password": {
            "description": "User password.",
            "type": "string",
            "example": "MySecretPassword",
            "nullable": true
          },
          "Communications": {
            "description": "Minimum one communication with type Email must be added.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCommunicationRequest"
            }
          }
        }
      },
      "CreateCredentialsRequest": {
        "type": "object",
        "required": [
          "UserId",
          "Login",
          "Password"
        ],
        "properties": {
          "UserId": {
            "description": "Unique user identifier.",
            "type": "string",
            "format": "uuid",
            "example": "ab4a5594-98aa-48ef-8ab9-c43c0a73902d"
          },
          "Login": {
            "description": "User login.",
            "type": "string",
            "example": "Mylogin"
          },
          "Password": {
            "description": "User password received by email.",
            "type": "string",
            "example": "Sicretpassword"
          }
        }
      },
      "EditUserRequest": {
        "type": "array",
        "minItems": 1,
        "example": [
          {
            "op": "replace",
            "path": "/FirstName",
            "value": {
              "description": "New user first name",
              "type": "string",
              "example": "Ivan"
            }
          },
          {
            "op": "replace",
            "path": "/LastName",
            "value": {
              "description": "New user last name",
              "type": "string",
              "example": "Ivanov"
            }
          },
          {
            "op": "add",
            "path": "/MiddleName",
            "value": {
              "description": "User middle name",
              "type": "string",
              "example": "Ivanovich"
            }
          },
          {
            "op": "replace",
            "path": "/MiddleName",
            "value": {
              "description": "New user middle name",
              "type": "string",
              "example": "Ivanovich"
            }
          },
          {
            "op": "replace",
            "path": "/Gender",
            "value": {
              "$ref": "#/components/schemas/UserGender"
            }
          },
          {
            "op": "add",
            "path": "/DateOfBirth",
            "value": {
              "description": "Date of user birth.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "replace",
            "path": "/DateOfBirth",
            "value": {
              "description": "Date of user birth.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "add",
            "path": "/City",
            "value": {
              "description": "User city.",
              "type": "string",
              "example": "Moscow"
            }
          },
          {
            "op": "replace",
            "path": "/City",
            "value": {
              "description": "User city.",
              "type": "string",
              "example": "Moscow"
            }
          },
          {
            "op": "replace",
            "path": "/Status",
            "value": {
              "$ref": "#/components/schemas/UserStatus"
            }
          },
          {
            "op": "add",
            "path": "/StartWorkingAt",
            "value": {
              "description": "Time when the user started working for the company.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "replace",
            "path": "/StartWorkingAt",
            "value": {
              "description": "Time when the user started working for the company.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "replace",
            "path": "/Rate",
            "value": {
              "description": "User rate.",
              "type": "number",
              "format": "float",
              "example": 0.25
            }
          },
          {
            "op": "add",
            "path": "/AvatarImage",
            "value": {
              "$ref": "#/components/schemas/AddImageRequest"
            }
          },
          {
            "op": "replace",
            "path": "/AvatarImage",
            "value": {
              "$ref": "#/components/schemas/AddImageRequest"
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PatchUserDocument"
        }
      },
      "PatchUserDocument": {
        "type": "object",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed.",
            "enum": [
              "add",
              "replace",
              "delete"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer.",
            "enum": [
              "/FirstName",
              "/LastName",
              "/MiddleName",
              "/Gender",
              "/DateOfBirth",
              "/City",
              "/AvatarImage",
              "/Status",
              "/StartWorkingAt",
              "/Rate",
              "/DepartmentId",
              "/PositionId",
              "/RoleId",
              "/OfficeId",
              "/About",
              "/IsActive"
            ]
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "OperationResultResponseCredentialsResponse": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "type": "object",
            "properties": {
              "userId": {
                "type": "string",
                "format": "uuid"
              },
              "accessToken": {
                "type": "string"
              },
              "refreshToken": {
                "type": "string"
              },
              "accessTokenExpiresIn": {
                "description": "AccessToken life time in minutes",
                "type": "number",
                "format": "double"
              },
              "refreshTokenExpiresIn": {
                "description": "RefreshToken life time in minutes",
                "type": "number",
                "format": "double"
              }
            }
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "FirstName": {
            "type": "string"
          },
          "LastName": {
            "type": "string"
          },
          "MiddleName": {
            "type": "string",
            "nullable": true
          },
          "Gender": {
            "$ref": "#/components/schemas/UserGender"
          },
          "DateOfBirth": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/UserStatus"
          },
          "IsAdmin": {
            "type": "boolean"
          },
          "IsActive": {
            "type": "boolean"
          },
          "StartWorkingAt": {
            "type": "string",
            "format": "date",
            "nullable": true
          },
          "Rate": {
            "type": "number"
          },
          "About": {
            "type": "string",
            "nullable": true
          },
          "Department": {
            "$ref": "#/components/schemas/DepartmentInfo",
            "nullable": true
          },
          "Position": {
            "$ref": "#/components/schemas/PositionInfo",
            "nullable": true
          },
          "Avatar": {
            "$ref": "#/components/schemas/ImageInfo",
            "nullable": true
          },
          "Role": {
            "$ref": "#/components/schemas/RoleInfo",
            "nullable": true
          },
          "Office": {
            "$ref": "#/components/schemas/OfficeInfo",
            "nullable": true
          }
        }
      },
      "ImageType": {
        "type": "string",
        "description": "Type of image.",
        "enum": [
          "Full",
          "Thumb"
        ],
        "example": "Full",
        "default": "Full"
      },
      "ImageInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "ParentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "Type": {
            "$ref": "#/components/schemas/ImageType"
          },
          "Content": {
            "type": "string",
            "nullable": false,
            "description": "Image file content in base64 encoded string."
          },
          "Extension": {
            "type": "string",
            "nullable": false
          },
          "Name": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "DepartmentInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "StartWorkingAt": {
            "type": "string"
          }
        }
      },
      "PositionInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "nullable": false
          },
          "Name": {
            "type": "string",
            "nullable": false
          },
          "ReceivedAt": {
            "type": "string",
            "nullable": false
          }
        }
      },
      "RoleInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "nullable": false
          },
          "Name": {
            "type": "string",
            "nullable": false
          },
          "Description": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "OfficeInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid",
            "nullable": false
          },
          "Name": {
            "type": "string",
            "nullable": true
          },
          "City": {
            "type": "string",
            "nullable": false
          },
          "Address": {
            "type": "string",
            "nullable": false
          }
        }
      },
      "CommunicationInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Type": {
            "$ref": "#/components/schemas/CommunicationType"
          },
          "Value": {
            "type": "string"
          }
        }
      },
      "CertificateInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "SchoolName": {
            "type": "string"
          },
          "EducationType": {
            "$ref": "#/components/schemas/EducationType"
          },
          "ReceivedAt": {
            "type": "string"
          },
          "Image": {
            "$ref": "#/components/schemas/ImageInfo"
          }
        }
      },
      "UserAchievementInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "AchievementId": {
            "description": "Base achievement ID.",
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "ReceivedAt": {
            "type": "string"
          },
          "Image": {
            "$ref": "#/components/schemas/ImageInfo"
          }
        }
      },
      "ProjectInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "Name": {
            "type": "string"
          },
          "Status": {
            "type": "string"
          },
          "ShortName": {
            "type": "string"
          },
          "ShortDescription": {
            "type": "string"
          }
        }
      },
      "ChangePasswordRequest": {
        "type": "object",
        "properties": {
          "UserId": {
            "description": "Unique user identifier.",
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4"
          },
          "Secret": {
            "type": "string",
            "format": "uuid",
            "example": "22cf2f1e-ebaa-4db1-a0fe-f2b5ff5854f4"
          },
          "Login": {
            "description": "User login.",
            "type": "string",
            "example": "login"
          },
          "NewPassword": {
            "description": "New user password.",
            "type": "string",
            "example": "Mypassword"
          }
        }
      },
      "ErrorResponse": {
        "description": "Error information",
        "type": "object",
        "properties": {
          "UtcTime": {
            "type": "string"
          },
          "Header": {
            "type": "string"
          },
          "Message": {
            "description": "A human readable message providing more details about the error.",
            "type": "string"
          }
        }
      },
      "OperationResultResponse": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "type": "object",
            "nullable": true
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "OperationResultResponseImagesIds": {
        "description": "Response object for action operations.",
        "type": "object",
        "properties": {
          "Body": {
            "$ref": "#/components/schemas/ImagesIds"
          },
          "Status": {
            "$ref": "#/components/schemas/OperationResultStatusType"
          },
          "Errors": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CommunicationType": {
        "type": "string",
        "description": "Communication type.",
        "enum": [
          "Skype",
          "Phone",
          "Email",
          "Telegram",
          "Twitter"
        ],
        "example": "Email"
      },
      "EducationType": {
        "type": "string",
        "description": "Education format.",
        "enum": [
          "Online",
          "Offline"
        ],
        "example": "Online"
      },
      "UserGender": {
        "type": "string",
        "description": "Mode for user gender.",
        "enum": [
          "NotSelected",
          "Male",
          "Female"
        ],
        "example": "Male",
        "default": "NotSelected"
      },
      "UserStatus": {
        "type": "string",
        "description": "Mode for user status.",
        "enum": [
          "Vacation",
          "Sick",
          "WorkFromOffice",
          "WorkFromHome"
        ],
        "example": "Sick",
        "default": "WorkFromOffice"
      },
      "OperationResultStatusType": {
        "type": "string",
        "description": "Operation complition result status.",
        "enum": [
          "FullSuccess",
          "PartialSuccess",
          "Failed"
        ],
        "example": "FullSuccess",
        "default": "FullSuccess"
      },
      "FormEducation": {
        "type": "string",
        "description": "Education form.",
        "enum": [
          "FullTime",
          "Distance"
        ],
        "example": "FullTime"
      },
      "EditEducationRequest": {
        "type": "array",
        "minItems": 1,
        "example": [
          {
            "op": "replace",
            "path": "/UniversityName",
            "value": {
              "description": "New university name",
              "type": "string",
              "example": "State University"
            }
          },
          {
            "op": "replace",
            "path": "/QualificationName",
            "value": {
              "description": "New qualification name.",
              "type": "string",
              "example": "Qualification"
            }
          },
          {
            "op": "replace",
            "path": "/FormEducation",
            "value": {
              "$ref": "#/components/schemas/FormEducation"
            }
          },
          {
            "op": "replace",
            "path": "/AdmissionAt",
            "value": {
              "description": "Date of admission.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "add",
            "path": "/IssueAt",
            "value": {
              "description": "Date of issue.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "replace",
            "path": "/IsActive",
            "value": {
              "description": "Is active certificate.",
              "type": "bool",
              "example": "false"
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PatchEducationDocument"
        }
      },
      "PatchEducationDocument": {
        "type": "object",
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed.",
            "enum": [
              "replace",
              "add"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer.",
            "enum": [
              "/UniversityName",
              "/QualificationName",
              "/FormEducation",
              "/AdmissiomAt",
              "/IssueAt",
              "/IsActive"
            ]
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "CreateEducationRequest": {
        "type": "object",
        "required": [
          "UserId",
          "UniversityName",
          "QualificationName",
          "FormEducation",
          "AdmissionAt"
        ],
        "properties": {
          "UserId": {
            "description": "Unique user identifier.",
            "type": "string",
            "format": "uuid",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkw"
          },
          "UniversityName": {
            "description": "Name of univerity.",
            "type": "string",
            "example": "Orel State University",
            "maxLength": 100
          },
          "QualificationName": {
            "description": "Name of qualification.",
            "type": "string",
            "example": "Computer Programmer",
            "maxLength": 100
          },
          "FormEducation": {
            "$ref": "#/components/schemas/FormEducation"
          },
          "AdmissionAt": {
            "description": "Date of admission.",
            "type": "string",
            "format": "date",
            "example": "2021-01-21T00:00:00.000Z"
          },
          "IssueAt": {
            "description": "Date of issuue.",
            "type": "string",
            "format": "date",
            "example": "2021-01-21T00:00:00.000Z"
          }
        }
      },
      "BadRequest": {
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "description": "contains arrays of error messages (format: strings)"
          },
          "type": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "traceId": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "EducationInfo": {
        "type": "object",
        "properties": {
          "Id": {
            "type": "string",
            "format": "uuid"
          },
          "UniversityName": {
            "type": "string"
          },
          "QualificationName": {
            "type": "string"
          },
          "FormEducation": {
            "$ref": "#/components/schemas/FormEducation"
          },
          "AdmissionAt": {
            "type": "string"
          },
          "IssueAt": {
            "type": "string",
            "nullable": true
          }
        }
      },
      "AddImageRequest": {
        "type": "object",
        "required": [
          "Content",
          "Extension"
        ],
        "properties": {
          "Name": {
            "description": "Image name.",
            "type": "string",
            "example": "Avatar"
          },
          "Content": {
            "description": "Image content.",
            "type": "string",
            "format": "byte"
          },
          "Extension": {
            "description": "Image extension.",
            "type": "string",
            "example": ".png"
          }
        }
      },
      "CreateCertificateRequest": {
        "type": "object",
        "required": [
          "UserId",
          "Name",
          "SchoolName",
          "ReceivedAt",
          "EducationType",
          "Image"
        ],
        "properties": {
          "UserId": {
            "description": "Unique user identifier.",
            "type": "string",
            "format": "uuid",
            "example": "ab4a5594-98aa-48ef-8ab9-c43c0a73902d"
          },
          "Name": {
            "description": "Certificate name.",
            "type": "string",
            "example": "Frontend developer."
          },
          "SchoolName": {
            "description": "Name of school.",
            "type": "string",
            "example": "Summer school."
          },
          "ReceivedAt": {
            "description": "Date of issue of the certificate.",
            "type": "string",
            "format": "date",
            "example": "2021-01-21T00:00:00.000Z"
          },
          "EducationType": {
            "$ref": "#/components/schemas/EducationType"
          },
          "Image": {
            "$ref": "#/components/schemas/AddImageRequest"
          }
        }
      },
      "EditCertificateRequest": {
        "type": "array",
        "minItems": 1,
        "example": [
          {
            "op": "replace",
            "path": "/UserId",
            "value": {
              "description": "New unique user identifier.",
              "type": "string",
              "format": "uuid",
              "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkw"
            }
          },
          {
            "op": "replace",
            "path": "/EducationType",
            "value": {
              "$ref": "#/components/schemas/EducationType"
            }
          },
          {
            "op": "replace",
            "path": "/Name",
            "value": {
              "description": "New name",
              "type": "string",
              "example": "Frontend developer"
            }
          },
          {
            "op": "replace",
            "path": "/SchoolName",
            "value": {
              "description": "New school name.",
              "type": "string",
              "example": "Semmer school"
            }
          },
          {
            "op": "replace",
            "path": "/ReceivedAt",
            "value": {
              "description": "Date of issue of the certificate.",
              "type": "string",
              "format": "date",
              "example": "2021-01-21T00:00:00.000Z"
            }
          },
          {
            "op": "replace",
            "path": "/IsActive",
            "value": {
              "description": "Is active certificate.",
              "type": "bool",
              "example": "false"
            }
          },
          {
            "op": "replace",
            "path": "/Image",
            "value": {
              "$ref": "#/components/schemas/AddImageRequest"
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PatchCertificateDocument"
        }
      },
      "PatchCertificateDocument": {
        "type": "object",
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed.",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer.",
            "enum": [
              "/UserId",
              "/Name",
              "/SchoolName",
              "/EducationType",
              "/ReceivedAt",
              "/IsActive",
              "/Image"
            ]
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "CreateCommunicationRequest": {
        "type": "object",
        "required": [
          "Type",
          "Value"
        ],
        "properties": {
          "UserId": {
            "description": "Unique user identifier. Is null if create with user creating",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "ab4a5594-98aa-48ef-8ab9-c43c0a73902d"
          },
          "Type": {
            "$ref": "#/components/schemas/CommunicationType"
          },
          "Value": {
            "description": "Communication value",
            "type": "string",
            "example": "mail@mail.ru"
          }
        }
      },
      "EditCommunicationRequest": {
        "type": "array",
        "minItems": 1,
        "example": [
          {
            "op": "replace",
            "path": "/value",
            "value": {
              "type": "string"
            }
          }
        ],
        "items": {
          "$ref": "#/components/schemas/PatchCommunicationDocument"
        }
      },
      "PatchCommunicationDocument": {
        "type": "object",
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed.",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer.",
            "enum": [
              "/Type",
              "/Value"
            ]
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "AddAvatarRequest": {
        "type": "object",
        "required": [
          "UserId",
          "Images"
        ],
        "properties": {
          "UserId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique user identifier.",
            "example": "49f0e767-4f07-44fe-beff-36d135006fde"
          },
          "Images": {
            "$ref": "#/components/schemas/AddImageRequest"
          }
        }
      },
      "ImagesIds": {
        "type": "array",
        "items": {
          "type": "string",
          "format": "uuid"
        }
      },
      "CreateSkillRequest": {
        "type": "object",
        "required": [
          "Name"
        ],
        "properties": {
          "Name": {
            "description": "Unique name of the skill.",
            "type": "string",
            "nullable": false,
            "example": "Frontend"
          }
        }
      }
    },
    "parameters": {
      "securityToken": {
        "name": "token",
        "in": "header",
        "description": "The JWT token.",
        "schema": {
          "type": "string",
          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkw"
        },
        "required": true
      }
    }
  }
}
